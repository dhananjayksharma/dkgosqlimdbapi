// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: imdbproto/imdb_service.proto

package imdbprotopb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImdbServiceClient is the client API for ImdbService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImdbServiceClient interface {
	AddPerson(ctx context.Context, in *RequestAddPerson, opts ...grpc.CallOption) (*ResponseAddPerson, error)
	AddManyPerson(ctx context.Context, opts ...grpc.CallOption) (ImdbService_AddManyPersonClient, error)
	ListPerson(ctx context.Context, in *SearchPersonRequest, opts ...grpc.CallOption) (ImdbService_ListPersonClient, error)
	ListPersonById(ctx context.Context, opts ...grpc.CallOption) (ImdbService_ListPersonByIdClient, error)
}

type imdbServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImdbServiceClient(cc grpc.ClientConnInterface) ImdbServiceClient {
	return &imdbServiceClient{cc}
}

func (c *imdbServiceClient) AddPerson(ctx context.Context, in *RequestAddPerson, opts ...grpc.CallOption) (*ResponseAddPerson, error) {
	out := new(ResponseAddPerson)
	err := c.cc.Invoke(ctx, "/imdbproto.ImdbService/AddPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imdbServiceClient) AddManyPerson(ctx context.Context, opts ...grpc.CallOption) (ImdbService_AddManyPersonClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImdbService_ServiceDesc.Streams[0], "/imdbproto.ImdbService/AddManyPerson", opts...)
	if err != nil {
		return nil, err
	}
	x := &imdbServiceAddManyPersonClient{stream}
	return x, nil
}

type ImdbService_AddManyPersonClient interface {
	Send(*RequestAddPerson) error
	CloseAndRecv() (*ResponseAddManyPerson, error)
	grpc.ClientStream
}

type imdbServiceAddManyPersonClient struct {
	grpc.ClientStream
}

func (x *imdbServiceAddManyPersonClient) Send(m *RequestAddPerson) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imdbServiceAddManyPersonClient) CloseAndRecv() (*ResponseAddManyPerson, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ResponseAddManyPerson)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imdbServiceClient) ListPerson(ctx context.Context, in *SearchPersonRequest, opts ...grpc.CallOption) (ImdbService_ListPersonClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImdbService_ServiceDesc.Streams[1], "/imdbproto.ImdbService/ListPerson", opts...)
	if err != nil {
		return nil, err
	}
	x := &imdbServiceListPersonClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ImdbService_ListPersonClient interface {
	Recv() (*Person, error)
	grpc.ClientStream
}

type imdbServiceListPersonClient struct {
	grpc.ClientStream
}

func (x *imdbServiceListPersonClient) Recv() (*Person, error) {
	m := new(Person)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imdbServiceClient) ListPersonById(ctx context.Context, opts ...grpc.CallOption) (ImdbService_ListPersonByIdClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImdbService_ServiceDesc.Streams[2], "/imdbproto.ImdbService/ListPersonById", opts...)
	if err != nil {
		return nil, err
	}
	x := &imdbServiceListPersonByIdClient{stream}
	return x, nil
}

type ImdbService_ListPersonByIdClient interface {
	Send(*SearchPersonRequest) error
	Recv() (*Person, error)
	grpc.ClientStream
}

type imdbServiceListPersonByIdClient struct {
	grpc.ClientStream
}

func (x *imdbServiceListPersonByIdClient) Send(m *SearchPersonRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imdbServiceListPersonByIdClient) Recv() (*Person, error) {
	m := new(Person)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImdbServiceServer is the server API for ImdbService service.
// All implementations must embed UnimplementedImdbServiceServer
// for forward compatibility
type ImdbServiceServer interface {
	AddPerson(context.Context, *RequestAddPerson) (*ResponseAddPerson, error)
	AddManyPerson(ImdbService_AddManyPersonServer) error
	ListPerson(*SearchPersonRequest, ImdbService_ListPersonServer) error
	ListPersonById(ImdbService_ListPersonByIdServer) error
	mustEmbedUnimplementedImdbServiceServer()
}

// UnimplementedImdbServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImdbServiceServer struct {
}

func (UnimplementedImdbServiceServer) AddPerson(context.Context, *RequestAddPerson) (*ResponseAddPerson, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPerson not implemented")
}
func (UnimplementedImdbServiceServer) AddManyPerson(ImdbService_AddManyPersonServer) error {
	return status.Errorf(codes.Unimplemented, "method AddManyPerson not implemented")
}
func (UnimplementedImdbServiceServer) ListPerson(*SearchPersonRequest, ImdbService_ListPersonServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPerson not implemented")
}
func (UnimplementedImdbServiceServer) ListPersonById(ImdbService_ListPersonByIdServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPersonById not implemented")
}
func (UnimplementedImdbServiceServer) mustEmbedUnimplementedImdbServiceServer() {}

// UnsafeImdbServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImdbServiceServer will
// result in compilation errors.
type UnsafeImdbServiceServer interface {
	mustEmbedUnimplementedImdbServiceServer()
}

func RegisterImdbServiceServer(s grpc.ServiceRegistrar, srv ImdbServiceServer) {
	s.RegisterService(&ImdbService_ServiceDesc, srv)
}

func _ImdbService_AddPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAddPerson)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImdbServiceServer).AddPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imdbproto.ImdbService/AddPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImdbServiceServer).AddPerson(ctx, req.(*RequestAddPerson))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImdbService_AddManyPerson_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImdbServiceServer).AddManyPerson(&imdbServiceAddManyPersonServer{stream})
}

type ImdbService_AddManyPersonServer interface {
	SendAndClose(*ResponseAddManyPerson) error
	Recv() (*RequestAddPerson, error)
	grpc.ServerStream
}

type imdbServiceAddManyPersonServer struct {
	grpc.ServerStream
}

func (x *imdbServiceAddManyPersonServer) SendAndClose(m *ResponseAddManyPerson) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imdbServiceAddManyPersonServer) Recv() (*RequestAddPerson, error) {
	m := new(RequestAddPerson)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ImdbService_ListPerson_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchPersonRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImdbServiceServer).ListPerson(m, &imdbServiceListPersonServer{stream})
}

type ImdbService_ListPersonServer interface {
	Send(*Person) error
	grpc.ServerStream
}

type imdbServiceListPersonServer struct {
	grpc.ServerStream
}

func (x *imdbServiceListPersonServer) Send(m *Person) error {
	return x.ServerStream.SendMsg(m)
}

func _ImdbService_ListPersonById_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImdbServiceServer).ListPersonById(&imdbServiceListPersonByIdServer{stream})
}

type ImdbService_ListPersonByIdServer interface {
	Send(*Person) error
	Recv() (*SearchPersonRequest, error)
	grpc.ServerStream
}

type imdbServiceListPersonByIdServer struct {
	grpc.ServerStream
}

func (x *imdbServiceListPersonByIdServer) Send(m *Person) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imdbServiceListPersonByIdServer) Recv() (*SearchPersonRequest, error) {
	m := new(SearchPersonRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImdbService_ServiceDesc is the grpc.ServiceDesc for ImdbService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImdbService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imdbproto.ImdbService",
	HandlerType: (*ImdbServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPerson",
			Handler:    _ImdbService_AddPerson_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddManyPerson",
			Handler:       _ImdbService_AddManyPerson_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ListPerson",
			Handler:       _ImdbService_ListPerson_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListPersonById",
			Handler:       _ImdbService_ListPersonById_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "imdbproto/imdb_service.proto",
}
